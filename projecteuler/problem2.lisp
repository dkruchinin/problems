;; Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
;; By starting with 1 and 2, the first 10 terms will be:
;; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;; Find the sum of all the even-valued terms in the sequence which 
;; do not exceed four million.

; More abstract and reusable but slower way
(defun fib-list (start lim)
  "This function returns an increasely ordered list
containinng lements from Fibbonaci sequence which starts from 'start'
and doesn't exceed 'lim'."
    (labels ((rec (cur next l)
                  (if (> cur lim)
                      (nreverse l)
                      (rec next (+ cur next) (cons cur l)))))
      (rec start (+ start 1) nil)))

(print (reduce #'+ (delete-if #'oddp (fib-list 1 4000000))))

; Direct way. Quite faster than previous one but
; ugly and not very reusable.
(loop for cur = 1 then next
      and next = (+ cur 1) then (+ cur next)
      while (< cur 4000000)
      when (evenp cur) sum cur into s
      finally (format t "~%~d~%" s))
