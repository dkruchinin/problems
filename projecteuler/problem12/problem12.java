// The sequence of triangle numbers is generated by adding the natural numbers. So the
// 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// Let us list the factors of the first seven triangle numbers:
//
//     1: 1
//     3: 1,3
//     6: 1,2,3,6
//    10: 1,2,5,10
//    15: 1,3,5,15
//    21: 1,3,7,21
//    28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
// What is the value of the first triangle number to have over five hundred divisors?

import java.util.HashMap;
import java.lang.Math;

class PrimeFactor {
    public int factor;
    public int power;

    public PrimeFactor(int factor, int power) {
        this.factor = factor;
        this.power = power;
    }
}

class Factors {
    static public HashMap<Integer, PrimeFactor> getPrimeFactors(long number) {
        HashMap<Integer, PrimeFactor> primes = new HashMap<Integer, PrimeFactor>();
        long limit = number / 2 + 1;
        int i = 2;

        while ((i < limit) && (number > 1)) {
            if (number % i == 0) {
                if (primes.containsKey(i)) {
                    primes.get(i).power++;
                }
                else {
                    primes.put(i, new PrimeFactor(i, 1));
                }

                number /= i;
                continue;
            }

            i++;
        }

        return primes;
    }
    
}

class TriagNum {
    private long number;
    private int order;

    public TriagNum(int order) {
        this.order = order;
        this.number = order * (order + 1) / 2;
    }

    public void next() {
        this.number += ++this.order;
    }

    public int getOrder() {
        return order;
    }

    public long getNumber() {
        return number;
    }
}

class problem12 {
    static public void main(String args[]) {
        int numFactors = 1;
        TriagNum tn = new TriagNum(1);

        while (numFactors <= 500) {
            HashMap<Integer, PrimeFactor> primeFactors;
            tn.next();
            primeFactors = Factors.getPrimeFactors(tn.getNumber());
            numFactors = 1;
            for (PrimeFactor p : primeFactors.values()) {
                numFactors *= (p.power + 1);
            }
        }

        System.out.printf("%d(%d) => %d\n", tn.getOrder(), tn.getNumber(), numFactors);
    }
}